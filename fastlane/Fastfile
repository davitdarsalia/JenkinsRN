default_platform(:android)

platform :android do
  desc "Increment versionCode and versionName"
  lane :increment do
    increment_version_name(
      app_project_dir: 'android/app',
      bump_type: 'minor'
    )
    increment_version_code(
      app_project_dir: 'android/app'
    )
  end

  lane :releaseAPK do
    gradle(
      task: "release",
      project_dir: "./android",
      properties: {
        "android.injected.signing.store.file" => ENV['PRODUCTION_KEY_STORE_FILE'],
        "android.injected.signing.store.password" => ENV['PRODUCTION_KEY_STORE_PASSWORD'],
        "android.injected.signing.key.alias" => ENV['PRODUCTION_KEY_KEY_ALIAS'],
        "android.injected.signing.key.password" => ENV['PRODUCTION_KEY_KEY_PASSWORD'],
      }
    )
  end

  lane :releaseAAB do
    gradle(
      task: "bundle",
      project_dir: "android",
      properties: {
        "android.injected.signing.store.file" => ENV['PRODUCTION_KEY_STORE_FILE'],
        "android.injected.signing.store.password" => ENV['PRODUCTION_KEY_STORE_PASSWORD'],
        "android.injected.signing.key.alias" => ENV['PRODUCTION_KEY_KEY_ALIAS'],
        "android.injected.signing.key.password" => ENV['PRODUCTION_KEY_KEY_PASSWORD'],
      }
    )
  end

  lane :betaAndroid do |options|
    increment
    releaseAPK
    releaseAAB

   
    local =  options.fetch(:local, true)

    if local
    require 'fileutils'

    output_dir = '../test-builds/android'

    aab_path = '../android/app/build/outputs/bundle/release/app-release.aab'
    apk_path = '../android/app/build/outputs/apk/release/app-release.apk'

    FileUtils.mkdir_p(output_dir)

    FileUtils.cp(aab_path, output_dir)
    FileUtils.cp(apk_path, output_dir)
    end

    UI.message("AAB and APK build completed successfully.")
  end

  lane :releaseAndroid do
    increment
    releaseAPK
  end

   lane :releaseStore do
    increment
    releaseAAB
  end
end
